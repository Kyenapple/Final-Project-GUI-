# mo7 Final Project Update
# author - Kye Church
# Created 2025-04-24, Updated 2025-05-10 (klc)
# This GUI application will help workers keep track of a running number of bolts torqued 
# AI ASSISTANCE WAS USED AND IS ANNOTATED 

# psuedo code
# import tkinter
# create top level window for area selection
# select area
# loop for repeat engine selection
# close windows
# give total bolts and number of engines
# summary


# import tkinter/
import tkinter as tk

# Create variables (global, used throughout the entire code)
TOTALBOLTS = 0
yourArea = ""
shiftTotals = {}

# Start engine counts with specific bolt amounts for each engine type in each area 
engineCount = {
    "camsAndGears": {"LYM0000": 34, "JD70000": 34, "ZNL0000": 42},
    "frontHousing": {"LYM0000": 22, "JD70000": 22, "ZNL0000": 30},
    "rearHousing": {"LYM0000": 36, "JD70000": 36, "ZNL0000": 38},
}

# Create area selection window that pops up
def areaSelectionWindow():
    # Opens area selection window
    areaWindow = tk.Toplevel(root)
    areaWindow.title("Area Selection")
    # starting size for window
    areaWindow.geometry("800x500")
    areaWindow.resizable(True, True)

    # Copilot used to add columnspan for longer text box! Title label for user to select area. Using grid structure
    tk.Label(areaWindow, text="Please select your area: ")

    # connect all names with code names
    areas = {
        "Cams and Gears Install": "camsAndGears",
        "Front Housing Install": "frontHousing",
        "Rear Housing Install": "rearHousing"
    }

    # format grid and button placement 
    counter = 0
    for label, area in areas.items():
        # when button is pressed it uses selectedArea to find correct information needed
        tk.Button(areaWindow, text=label, command=lambda a=area: selectArea(a, areaWindow)).grid(row=1, column=counter)
        # step up counter 
        counter += 1

# user area selection/ opens selection window
# USED COPILOT/ how to destroy/close a window... self explanitory after I looked it up
def selectArea(area, window):
    global yourArea
    # set yourArea as selected area
    yourArea = area
    # Closes window after selection has been made 
    window.destroy()

    # print out users selected area to ensure correct area was chossen
    print(f"You selected area: {yourArea}")
    engineSelectionWindow()

# opens new selection window
def engineSelectionWindow():
    # opens engine selection window,,, for repeat engine selection
    engineWindow = tk.Toplevel(root)
    # opens another window with this title "" 
    engineWindow.title("Please select one of the three engine types!")
    # set starting window size
    engineWindow.geometry("800x500")
    # allow for resizing
    engineWindow.resizable(True, True)
    tk.Label(engineWindow, text="Please select one of the three engine types!", font=("Arial", 14)).pack(pady=10)

    # set new counter for button at start of loop
    counter = 0

    # arrange buttons in {name} {# of bolts} for ease of use sarts loop
    for engineName, bolts in engineCount[yourArea].items():
        buttonName = f"{engineName} ({bolts} bolts)"
        tk.Button(engineWindow, text=buttonName, command=lambda e=engineName: addEngine(e)).pack(pady=10)
        # add a step counter to ensure theres a new colomn each new button added 
        counter +=1 
    # Make an end shift button that allows users to stop inputting engines and gain their totals
    tk.Button(engineWindow, text="End Of Shift", font=("Arial", 12, "bold"), command=lambda: endShift(engineWindow)).pack(pady=10)

# used to add to bolt torque count when engine is added
def addEngine(engineName):
    global TOTALBOLTS, shiftTotals
    # user check for engine in shift Totals, if not
    if engineName not in shiftTotals:
        shiftTotals[engineName] = 0
    # increase engine count by 1 each selected button
    shiftTotals[engineName] += 1

    # adds bolt count from selected engine
    TOTALBOLTS += engineCount[yourArea][engineName]

    # COPILOT USED TO CONFIGURE THIS. updates total label to new total
    # additional image of bolt added to total torque value
    boltIcon = tk.PhotoImage(file="C:\\Users\\churc\\OneDrive\\Pictures\\Camera Roll\\Bolts pic.png")
    totalLabel.config(text=f"Total number of bolts torqued this shift: {TOTALBOLTS}", font=("Arial", 12), image=boltIcon, compound="left")
    print(f"You completed a(n) {engineName} : {shiftTotals[engineName]} times this shift")
    totalLabel.image = boltIcon
    
# allows employee to stop entering engines and stop their day
def endShift(window):
    # closes engine selection window
    window.destroy()

    # opens new window for summary// title
    summaryWindow = tk.Toplevel(root)
    summaryWindow.title("Your summary for today: ")
    summaryWindow.geometry("800x500")

    # initial value for summary
    summary = ""
    # loop for finding correct counts and totals using string
    for engineName, count in shiftTotals.items():
        totalBolts = count * engineCount[yourArea][engineName]
        summary += f"{engineName}: {count} times ({totalBolts} bolts torqued)"
    # adds all bolts for final bolt torque count
    summary += f"Total bolts torqued today: {TOTALBOLTS}"

    # UTILIZED COPILOT TO ASSIST WITH A CLOSING STATEMENT SUMMARY AND CLOSE BUTTON
    tk.Label(summaryWindow, text=summary,justify="left").pack(padx=20, pady=10)
    tk.Button(summaryWindow, text="Close", command=summaryWindow.destroy).pack(pady=10)

# start up def. added to close the welcome window
def startApp():
    welcomeWindow.destroy()
    
    global root
    
    # Main loop setup// main window// title
    root = tk.Tk()
    root.title("Welcome to your Bolt Torque Counter for the 3500 Short Line!")
    
    # set a size for main window allow resizing
    root.geometry("1000x600")
    root.resizable(True, True)

    # set totalLabel as global for use through all code
    global totalLabel
    
    # COPILOT USED to assist with creating a label for total bolts displayed in the main window
    totalLabel = tk.Label(root, text="Total bolts torqued today = 0")
    totalLabel.pack()
    
    # Opens main loop window first 
    areaSelectionWindow()
    # start main loop
    root.mainloop()
    
# WELCOME SCREEN
welcomeWindow = tk.Tk()
welcomeWindow.title("Welcome Screen")

# Set starting size and resizability
welcomeWindow.geometry("800x500")
welcomeWindow.resizable(True, True)

# call the saved image
backGroundImage = tk.PhotoImage(file="C:/Users/churc/OneDrive/Pictures/Camera Roll/3500 Cat engine.png")

# create the background with the image 
imageLabel = tk.Label(welcomeWindow, image=backGroundImage)
imageLabel.place(relwidth=1, relheight=1)

# BADGE NUMBER ON WELCOME SCREEN
badgeLabel = tk.Label(welcomeWindow, text="Please enter your 7-digit badge number: ", font=("Arial", 14), bg="lightgray")
badgeLabel.place(x=280, y=250)

# create box for user entry
badgeEntry = tk.Entry(welcomeWindow, font=("Arial", 14), width=15)
badgeEntry.place(x=280, y=280)

# error message for no badge number input. hidden until invalid input
errorLabel = tk.Label(welcomeWindow, text="", fg="red", font=("Arial", 12), bg="lightgray")
errorLabel.place(x=280, y=310)

# continue Button to proceed to application
continueButton = tk.Button(welcomeWindow, text="Continue", font=("Arial", 14), bg="white", command=startApp)
continueButton.place(x=350, y=350)

# RECCOMENDATION FROM COPILOT to prevent trash collect
imageLabel.image = backGroundImage

# start application
welcomeWindow.mainloop()
